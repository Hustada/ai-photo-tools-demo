// © 2025 Mark Hustad — MIT License
// OpenAI provider implementation

import { OpenAI } from 'openai';
import type { AIProvider, AIProviderConfig, AIGenerationOptions } from './types.js';

export class OpenAIProvider implements AIProvider {
  public readonly name = 'openai';
  private client: OpenAI;
  private model: string;

  constructor(config: AIProviderConfig) {
    this.client = new OpenAI({
      apiKey: config.apiKey,
    });
    this.model = config.model || 'gpt-4';
  }

  async generateContent(options: AIGenerationOptions): Promise<string> {
    try {
      const response = await this.client.chat.completions.create({
        model: this.model,
        messages: [
          {
            role: 'system',
            content: options.systemPrompt
          },
          {
            role: 'user',
            content: options.userPrompt
          }
        ],
        max_tokens: options.maxTokens || 2500,
        temperature: options.temperature || 0.7,
      });

      const content = response.choices[0]?.message?.content;
      if (!content) {
        throw new Error('No content generated by OpenAI');
      }

      return content;
    } catch (error) {
      console.error(`[OpenAIProvider] Error generating content:`, error);
      throw new Error(`OpenAI generation failed: ${(error as Error).message}`);
    }
  }
}