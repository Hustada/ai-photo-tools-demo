"use strict";
// © 2025 Mark Hustad — MIT License
// OpenAI provider implementation
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpenAIProvider = void 0;
const openai_1 = require("openai");
class OpenAIProvider {
    name = 'openai';
    client;
    model;
    constructor(config) {
        this.client = new openai_1.OpenAI({
            apiKey: config.apiKey,
        });
        this.model = config.model || 'gpt-4';
    }
    async generateContent(options) {
        try {
            const response = await this.client.chat.completions.create({
                model: this.model,
                messages: [
                    {
                        role: 'system',
                        content: options.systemPrompt
                    },
                    {
                        role: 'user',
                        content: options.userPrompt
                    }
                ],
                max_tokens: options.maxTokens || 2500,
                temperature: options.temperature || 0.7,
            });
            const content = response.choices[0]?.message?.content;
            if (!content) {
                throw new Error('No content generated by OpenAI');
            }
            return content;
        }
        catch (error) {
            console.error(`[OpenAIProvider] Error generating content:`, error);
            throw new Error(`OpenAI generation failed: ${error.message}`);
        }
    }
}
exports.OpenAIProvider = OpenAIProvider;
