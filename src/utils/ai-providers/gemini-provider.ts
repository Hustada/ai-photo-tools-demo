// © 2025 Mark Hustad — MIT License
// Google Gemini provider implementation

import { GoogleGenerativeAI } from '@google/generative-ai';
import type { AIProvider, AIProviderConfig, AIGenerationOptions } from './types.js';

export class GeminiProvider implements AIProvider {
  public readonly name = 'gemini';
  private client: GoogleGenerativeAI;
  private model: string;

  constructor(config: AIProviderConfig) {
    this.client = new GoogleGenerativeAI(config.apiKey);
    // Default to Gemini 2.5 Pro for latest capabilities  
    this.model = config.model || 'gemini-2.5-pro';
  }

  async generateContent(options: AIGenerationOptions): Promise<string> {
    try {
      // Get the generative model
      const model = this.client.getGenerativeModel({ 
        model: this.model,
        generationConfig: {
          temperature: options.temperature || 0.7,
          maxOutputTokens: options.maxTokens || 8192, // Gemini supports larger outputs
          topP: 0.95,
          topK: 40,
        },
      });

      // Combine system and user prompts for Gemini
      // Gemini doesn't have explicit system/user roles, so we combine them
      const fullPrompt = `${options.systemPrompt}\n\n---\n\n${options.userPrompt}`;

      // Generate content
      const result = await model.generateContent(fullPrompt);
      const response = await result.response;
      const content = response.text();

      if (!content) {
        throw new Error('No content generated by Gemini');
      }

      console.log(`[GeminiProvider] ✅ Generated ${content.length} characters using ${this.model}`);
      return content;
    } catch (error) {
      console.error(`[GeminiProvider] Error generating content:`, error);
      throw new Error(`Gemini generation failed: ${(error as Error).message}`);
    }
  }
}